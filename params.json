{
  "name": "Google-api-php-client",
  "tagline": "A PHP client library for accessing Google APIs",
  "body": "[![Build Status](https://travis-ci.org/google/google-api-php-client.svg?branch=master)](https://travis-ci.org/google/google-api-php-client)\r\n\r\n# Google APIs Client Library for PHP #\r\n\r\n## Description ##\r\nThe Google API Client Library enables you to work with Google APIs such as Google+, Drive, or YouTube on your server.\r\n\r\n## Beta ##\r\nThis library is in Beta. We're comfortable enough with the stability and features of the library that we want you to build real production applications on it. We will make an effort to support the public and protected surface of the library and maintain backwards compatibility in the future. While we are still in Beta, we reserve the right to make incompatible changes.\r\n\r\n## Requirements ##\r\n* [PHP 5.4.0 or higher](http://www.php.net/)\r\n\r\n## Developer Documentation ##\r\nhttp://developers.google.com/api-client-library/php\r\n\r\n## Installation ##\r\n\r\nYou can use **Composer** or simply **Download the Release**\r\n\r\n### Composer\r\n\r\nThe preferred method is via [composer](https://getcomposer.org). Follow the\r\n[installation instructions](https://getcomposer.org/doc/00-intro.md) if you do not already have\r\ncomposer installed.\r\n\r\nOnce composer is installed, execute the following command in your project root to install this library:\r\n\r\n```sh\r\ncomposer require google/apiclient:^2.0\r\n```\r\n\r\nFinally, be sure to include the autoloader:\r\n\r\n```php\r\nrequire_once '/path/to/your-project/vendor/autoload.php';\r\n```\r\n\r\n### Download the Release\r\n\r\nIf you abhor using composer, you can download the package in its entirety. The [Releases](https://github.com/google/google-api-php-client/releases) page lists all stable versions. Download any file\r\nwith the name `google-api-php-client-[RELEASE_NAME].zip` for a package including this library and its dependencies.\r\n\r\nUncompress the zip file you download, and include the autoloader in your project:\r\n\r\n```php\r\nrequire_once '/path/to/google-api-php-client/vendor/autoload.php';\r\n```\r\n\r\nFor additional installation and setup instructions, see [the documentation](https://developers.google.com/api-client-library/php/start/installation).\r\n\r\n## Examples ##\r\nSee the [`examples/`](examples) directory for examples of the key client features. You can\r\nview them in your browser by running the php built-in web server.\r\n\r\n```\r\n$ php -S localhost:8000 -t examples/\r\n```\r\n\r\nAnd then browsing to the host and port you specified\r\n(in the above example, `http://localhost:8000`).\r\n\r\n### Basic Example ###\r\n\r\n```php\r\n// include your composer dependencies\r\nrequire_once 'vendor/autoload.php';\r\n\r\n$client = new Google_Client();\r\n$client->setApplicationName(\"Client_Library_Examples\");\r\n$client->setDeveloperKey(\"YOUR_APP_KEY\");\r\n\r\n$service = new Google_Service_Books($client);\r\n$optParams = array('filter' => 'free-ebooks');\r\n$results = $service->volumes->listVolumes('Henry David Thoreau', $optParams);\r\n\r\nforeach ($results as $item) {\r\n  echo $item['volumeInfo']['title'], \"<br /> \\n\";\r\n}\r\n```\r\n\r\n### Authentication with OAuth ###\r\n\r\n> An example of this can be seen in [`examples/simple-file-upload.php`](examples/simple-file-upload.php).\r\n\r\n1. Follow the instructions to [Create Web Application Credentials](https://developers.google.com/api-client-library/php/auth/web-app#creatingcred)\r\n1. Download the JSON credentials\r\n1. Set the path to these credentials using `Google_Client::setAuthConfig`:\r\n\r\n    ```php\r\n    $client = new Google_Client();\r\n    $client->setAuthConfig('/path/to/client_credentials.json');\r\n    ```\r\n\r\n1. Set the scopes required for the API you are going to call\r\n\r\n    ```php\r\n    $client->addScope(Google_Service_Drive::DRIVE);\r\n    ```\r\n\r\n1. Set your application's redirect URI\r\n\r\n    ```php\r\n    // Your redirect URI can be any registered URI, but in this example\r\n    // we redirect back to this same page\r\n    $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];\r\n    $client->setRedirectUri($redirect_uri);\r\n    ```\r\n\r\n1. In the script handling the redirect URI, exchange the authorization code for an access token:\r\n\r\n    ```php\r\n    if (isset($_GET['code'])) {\r\n        $token = $client->fetchAccessTokenWithAuthCode($_GET['code']);\r\n        $client->setAccessToken($token);\r\n    }\r\n    ```\r\n\r\n### Authentication with Service Accounts ###\r\n\r\n> An example of this can be seen in [`examples/service-account.php`](examples/service-account.php).\r\n\r\n1. Follow the instructions to [Create a Service Account](https://developers.google.com/api-client-library/php/auth/service-accounts#creatinganaccount)\r\n1. Download the JSON credentials\r\n1. Set the path to these credentials using the `GOOGLE_APPLICATION_CREDENTIALS` environment variable:\r\n\r\n    ```php\r\n    putenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json');\r\n    ```\r\n\r\n1. Tell the Google client to use your service account credentials to authenticate:\r\n\r\n    ```php\r\n    $client = new Google_Client();\r\n    $client->useApplicationDefaultCredentials();\r\n    ```\r\n\r\n1. Set the scopes required for the API you are going to call\r\n\r\n    ```php\r\n    $client->addScope(Google_Service_Drive::DRIVE);\r\n    ```\r\n\r\n1. If you have delegated domain-wide access to the service account and you want to impersonate a user account, specify the email address of the user account using the method setSubject:\r\n\r\n    ```php\r\n    $client->setSubject($user_to_impersonate);\r\n    ```\r\n\r\n### Making Requests ###\r\n\r\nThe classes used to call the API in [google-api-php-client-services](https://github.com/Google/google-api-php-client-services) are autogenerated. They map directly to the JSON requests and responses found in the [APIs Explorer](https://developers.google.com/apis-explorer/#p/).\r\n\r\nA JSON request to the [Datastore API](https://developers.google.com/apis-explorer/#p/datastore/v1beta3/datastore.projects.runQuery) would look like this:\r\n\r\n```json\r\nPOST https://datastore.googleapis.com/v1beta3/projects/YOUR_PROJECT_ID:runQuery?key=YOUR_API_KEY\r\n\r\n{\r\n    \"query\": {\r\n        \"kind\": [{\r\n            \"name\": \"Book\"\r\n        }],\r\n        \"order\": [{\r\n            \"property\": {\r\n                \"name\": \"title\"\r\n            },\r\n            \"direction\": \"descending\"\r\n        }],\r\n        \"limit\": 10\r\n    }\r\n}\r\n```\r\n\r\nUsing this library, the same call would look something like this:\r\n\r\n```php\r\n// create the datastore service class\r\n$datastore = new Google_Service_Datastore($client)\r\n\r\n// build the query - this maps directly to the JSON\r\n$query = new Google_Service_Datastore_Query([\r\n    'kind' => [\r\n        [\r\n            'name' => 'Book',\r\n        ],\r\n    ],\r\n    'order' => [\r\n        'property' => [\r\n            'name' => 'title',\r\n        ],\r\n        'direction' => 'descending',\r\n    ],\r\n    'limit' => 10,\r\n]);\r\n\r\n// build the request and response\r\n$request = new Google_Service_Datastore_RunQueryRequest(['query' => $query]);\r\n$response = $datastore->projects->runQuery('YOUR_DATASET_ID', $request);\r\n```\r\n\r\nHowever, as each property of the JSON API has a corresponding generated class, the above code could also be written like this:\r\n\r\n```php\r\n// create the datastore service class\r\n$datastore = new Google_Service_Datastore($client)\r\n\r\n// build the query\r\n$request = new Google_Service_Datastore_RunQueryRequest();\r\n$query = new Google_Service_Datastore_Query();\r\n//   - set the order\r\n$order = new Google_Service_Datastore_PropertyOrder();\r\n$order->setDirection('descending');\r\n$property = new Google_Service_Datastore_PropertyReference();\r\n$property->setName('title');\r\n$order->setProperty($property);\r\n$query->setOrder([$order]);\r\n//   - set the kinds\r\n$kind = new Google_Service_Datastore_KindExpression();\r\n$kind->setName('Book');\r\n$query->setKinds([$kind]);\r\n//   - set the limit\r\n$query->setLimit(10);\r\n\r\n// add the query to the request and make the request\r\n$request->setQuery($query);\r\n$response = $datastore->projects->runQuery('YOUR_DATASET_ID', $request);\r\n```\r\n\r\nThe method used is a matter of preference, but *it will be very difficult to use this library without first understanding the JSON syntax for the API*, so it is recommended to look at the [APIs Explorer](https://developers.google.com/apis-explorer/#p/) before using any of the services here.\r\n\r\n### Making HTTP Requests Directly ###\r\n\r\nIf Google Authentication is desired for external applications, or a Google API is not available yet in this library, HTTP requests can be made directly.\r\n\r\nThe `authorize` method returns an authorized [Guzzle Client](http://docs.guzzlephp.org/), so any request made using the client will contain the corresponding authorization.\r\n\r\n```php\r\n// create the Google client\r\n$client = new Google_Client();\r\n\r\n/**\r\n * Set your method for authentication. Depending on the API, This could be\r\n * directly with an access token, API key, or (recommended) using\r\n * Application Default Credentials.\r\n */\r\n$client->useApplicationDefaultCredentials();\r\n$client->addScope(Google_Service_Plus::PLUS_ME);\r\n\r\n// returns a Guzzle HTTP Client\r\n$httpClient = $client->authorize();\r\n\r\n// make an HTTP request\r\n$response = $httpClient->get('https://www.googleapis.com/plus/v1/people/me');\r\n```\r\n\r\n### Caching ###\r\n\r\nIt is recommended to use another caching library to improve performance. This can be done by passing a [PSR-6](http://www.php-fig.org/psr/psr-6/) compatible library to the client:\r\n\r\n```php\r\n$cache = new Stash\\Pool(new Stash\\Driver\\FileSystem);\r\n$client->setCache($cache);\r\n```\r\n\r\nIn this example we use [StashPHP](http://www.stashphp.com/). Add this to your project with composer:\r\n\r\n```\r\ncomposer require tedivm/stash\r\n```\r\n\r\n### Updating Tokens ###\r\n\r\nWhen using [Refresh Tokens](https://developers.google.com/identity/protocols/OAuth2InstalledApp#refresh) or [Service Account Credentials](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview), it may be useful to perform some action when a new access token is granted. To do this, pass a callable to the `setTokenCallback` method on the client:\r\n\r\n```php\r\n$logger = new Monolog\\Logger;\r\n$tokenCallback = function ($cacheKey, $accessToken) use ($logger) {\r\n  $logger->debug(sprintf('new access token received at cache key %s', $cacheKey));\r\n};\r\n$client->setTokenCallback($tokenCallback);\r\n```\r\n\r\n### Debugging Your HTTP Request using Charles ###\r\n\r\nIt is often very useful to debug your API calls by viewing the raw HTTP request. This library supports the use of [Charles Web Proxy](https://www.charlesproxy.com/documentation/getting-started/). Download and run Charles, and then capture all HTTP traffic through Charles with the following code:\r\n\r\n```php\r\n// FOR DEBUGGING ONLY\r\n$httpClient = new GuzzleHttp\\Client([\r\n    'proxy' => 'localhost:8888', // by default, Charles runs on localhost port 8888\r\n    'verify' => false, // otherwise HTTPS requests will fail.\r\n]);\r\n\r\n$client = new Google_Client();\r\n$client->setHttpClient($httpClient);\r\n```\r\n\r\nNow all calls made by this library will appear in the Charles UI.\r\n\r\nOne additional step is required in Charles to view SSL requests. Go to **Charles > Proxy > SSL Proxying Settings** and add the domain you'd like captured. In the case of the Google APIs, this is usually `*.googleapis.com`.\r\n\r\n### Service Specific Examples ###\r\n\r\nYouTube: https://github.com/youtube/api-samples/tree/master/php\r\n\r\n## How Do I Contribute? ##\r\n\r\nPlease see the [contributing](CONTRIBUTING.md) page for more information. In particular, we love pull requests - but please make sure to sign the [contributor license agreement](https://developers.google.com/api-client-library/php/contribute).\r\n\r\n## Frequently Asked Questions ##\r\n\r\n### What do I do if something isn't working? ###\r\n\r\nFor support with the library the best place to ask is via the google-api-php-client tag on StackOverflow: http://stackoverflow.com/questions/tagged/google-api-php-client\r\n\r\nIf there is a specific bug with the library, please [file a issue](https://github.com/google/google-api-php-client/issues) in the Github issues tracker, including an example of the failing code and any specific errors retrieved. Feature requests can also be filed, as long as they are core library requests, and not-API specific: for those, refer to the documentation for the individual APIs for the best place to file requests. Please try to provide a clear statement of the problem that the feature would address.\r\n\r\n### I want an example of X! ###\r\n\r\nIf X is a feature of the library, file away! If X is an example of using a specific service, the best place to go is to the teams for those specific APIs - our preference is to link to their examples rather than add them to the library, as they can then pin to specific versions of the library. If you have any examples for other APIs, let us know and we will happily add a link to the README above!\r\n\r\n### Why do you still support 5.2? ###\r\n\r\nWhen we started working on the 1.0.0 branch we knew there were several fundamental issues to fix with the 0.6 releases of the library. At that time we looked at the usage of the library, and other related projects, and determined that there was still a large and active base of PHP 5.2 installs. You can see this in statistics such as the PHP versions chart in the WordPress stats: http://wordpress.org/about/stats/. We will keep looking at the types of usage we see, and try to take advantage of newer PHP features where possible.\r\n\r\n### Why does Google_..._Service have weird names? ###\r\n\r\nThe _Service classes are generally automatically generated from the API discovery documents: https://developers.google.com/discovery/. Sometimes new features are added to APIs with unusual names, which can cause some unexpected or non-standard style naming in the PHP classes.\r\n\r\n### How do I deal with non-JSON response types? ###\r\n\r\nSome services return XML or similar by default, rather than JSON, which is what the library supports. You can request a JSON response by adding an 'alt' argument to optional params that is normally the last argument to a method call:\r\n\r\n```\r\n$opt_params = array(\r\n  'alt' => \"json\"\r\n);\r\n```\r\n\r\n### How do I set a field to null? ###\r\n\r\nThe library strips out nulls from the objects sent to the Google APIs as its the default value of all of the uninitialised properties. To work around this, set the field you want to null to `Google_Model::NULL_VALUE`. This is a placeholder that will be replaced with a true null when sent over the wire.\r\n\r\n## Code Quality ##\r\n\r\nRun the PHPUnit tests with PHPUnit. You can configure an API key and token in BaseTest.php to run all calls, but this will require some setup on the Google Developer Console.\r\n\r\n    phpunit tests/\r\n\r\n### Coding Style\r\n\r\nTo check for coding style violations, run\r\n\r\n```\r\nvendor/bin/phpcs src --standard=style/ruleset.xml -np\r\n```\r\n\r\nTo automatically fix (fixable) coding style violations, run\r\n\r\n```\r\nvendor/bin/phpcbf src --standard=style/ruleset.xml\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}